#!/usr/bin/env php
<?php

/**
 * IRC Bot
 *
 * @todo Refactor this bad boy
 */
set_time_limit(0);
ini_set('display_errors', 'on');
require __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Config\FileLocator;
use Symfony\Component\Config\Loader\DelegatingLoader;
use Symfony\Component\Config\Loader\LoaderResolver;
use Symfony\Component\Config\Resource\FileResource;
use Symfony\Component\Console\Input\StringInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\StreamOutput;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
use Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher;
use Symfony\Component\EventDispatcher\GenericEvent;
use Symfony\Component\Finder\Finder;
use \YamlConfigLoader;
use \Packet;

/**
 * IRC Bot
 */
class Bot {

    /**
     * @var Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
     */
    protected $dispatcher;
    /**
     * @var Symfony\Component\Console\Output\ConsoleOutput
     */
    protected $output;
    /**
     * @var Symfony\Component\Console\Output\StreamOutput
     */
    protected $socket;
    /**
     * @var array
     */
    protected $config;
    /**
     * @var Bot
     */
    private static $instance;

    public static function getInstance() {
        if (!self::$instance) {
            self::$instance = new Bot();
        }
        return self::$instance;
    }

    protected function __construct() {

    }

    public function run() {
        $this->output = new ConsoleOutput();
        $this->output->writeln('IRC Bot starting');
        $this->loadConfig();
        $this->setupDispatcher();
        $this->socket = new StreamOutput(fsockopen($this->config['irc']['server'], $this->config['irc']['port']));
        $this->dispatcher->dispatch('connect_post', new GenericEvent($this, array(
                'context' => self::getInstance(),
            )));
        do {
            $raw = trim(fgets($this->socket->getStream(), 512));
            if (empty($raw)) {
                continue;
            }
            if ($this->config['debug']) {
                // this needs to write to a log
                $this->output->writeln($raw);
            }
            $packet = new Packet($raw);
            $eventName = sprintf('command.%s', strtolower($packet->getCommand()));
            $this->dispatcher->dispatch($eventName, new GenericEvent($this, array(
                    'context' => self::getInstance(),
                    'packet' => $packet,
                )));
        }
        while (true);
    }

    /**
     * @return array
     */
    public function getConfig($key = null) {
        if (null !== $key) {
            if (isset($this->config[$key])) {
                return $this->config[$key];
            }
            return null;
        }
        return $this->config;
    }

    /**
     *
     * @return Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
     */
    public function getDispatcher() {
        return $this->dispatcher;
    }

    /**
     * @return Symfony\Component\Console\Output\ConsoleOutput
     */
    public function getOutput() {
        return $this->output;
    }

    /**
     * @return Symfony\Component\Console\Output\StreamOutput
     */
    public function getSocket() {
        return $this->socket;
    }

    /**
     * Load the config settings
     */
    protected function loadConfig() {
        $locator = new FileLocator(array(__DIR__ . '/app/config'));
        $configYml = $locator->locate('config.yml');
        $loaderResolver = new LoaderResolver(array(new YamlConfigLoader($locator)));
        $delegatingLoader = new DelegatingLoader($loaderResolver);
        $this->config = $delegatingLoader->load($configYml);
    }

    /**
     * Setup the dispatcher
     */
    protected function setupDispatcher() {
        $container = new ContainerBuilder();
        $loader = new YamlFileLoader($container, new FileLocator(array(__DIR__ . '/app/config')));
        $loader->load('services.yml');
        $this->dispatcher = new ContainerAwareEventDispatcher($container);
        $servicesYml = $container->getDefinitions();
        foreach ($servicesYml as $listen => $service) {
            /* @var $service Symfony\Component\DependencyInjection\Definition */
            $this->dispatcher->addSubscriberService($listen, $service->getClass());
        }
    }

}

// start this bitch
Bot::getInstance()->run();
